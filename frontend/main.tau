module tau

interface memory{
    ptr()->ptr<u8>
    bytes()->size
}

interface str{
    ptr()->ptr<void>
    length()->size
    bytes()->size
    capacity()->size
    /*operator [](size Byte)->u8*/
}

[[lib:">Kernel32.dll<"]]
aliases {
    GetProcessHeap = () -> ptr<void>
    HeapAlloc = (ptr<void> Heap, i32 Flags, size Bytes) -> ptr<u8>
    HeapFree = (ptr<void> Heap, i32 Flags, ptr<void> Mem) -> bool
    QueryPerformanceCounter = (ptr<u64> PerformanceCount) -> bool
    QueryPerformanceFrequency = (ptr<u64> Frequence) -> bool
}

struct mem{
    ptr<u8> data
    size bytes
    size references
}

/* constructor */
operator init(mem Self, size Bytes){
    const auto heap = GetProcessHeap()
    mut auto memory = HeapAlloc(heap, 0, Bytes)
    Self.data = memory
    Self.bytes = Bytes
    Self.references = 1
}

/* destructor */
operator free(mem Self){
    if Self.references == 1 {
        const auto heap = GetProcessHeap()
        HeapFree(heap, 0, Self.data)
        Self.data = nullptr
        Self.bytes = 0
        Self.references = 0
    } else {
        Self.references = Self.references - 1
    }
}

use ">process<"
use ">console<"
use ">arena<"

struct TokenLocationInfo{
    u64 Offset
    u64 Bytes
    u64 Line
    u64 Column
}

struct Node{
    ptr<Node> FirstChild
    ptr<Node> Next
    size TokenIndex
    u8 Kind
}

struct Lexer{
    vec<size> Terminals
    vec<size> Ignore
}

/*
aliases{
    TokenList = pair<vec<u8>, vec<TokenLocationInfo>>
}

printNode(Node Node, TokenList Tokens, ptr<u8> Buffer, size Bytes, size Depth){
    for i in [0:Depth]{
        console().log("\t")
    }
    console().log("Node: ")
    console().log(Node.TokenIndex.toString())
    if Node.TokenIndex != 0 {
        strview text
        text.str = Buffer
        text.start = Tokens.right.at(Node.TokenIndex).Offset
        text.bytes = Tokens.right.at(Node.TokenIndex).Bytes
        console().log(text)
    }
    console().log("\n")
}*/

printTokenList(TokenList Tokens){
    mut size i = Tokens.left.elements
    for t in [0:i]{
        console().log(Tokens.left[t].toString())
        console().log(">: start=<")
        console().log(Tokens.right[t].Offset.toString())
        console().log("> bytes=<")
        console().log(Tokens.right[t].Bytes.toString())
        console().log("> column=<")
        console().log(Tokens.right[t].Column.toString())
        console().log("> line=<")
        console().log(Tokens.right[t].Line.toString())
        console().log(">\n<")
    }
    console().log(i.toString())
    console().log(">tokens\n<")
}

run(){
    /* Define the memory management. */
    mut MEMORYSTATUSEX systemMemoryInfo = {}
    systemMemoryInfo.Length = sizeof(MEMORYSTATUSEX)
    GlobalMemoryStatusEx(ptr(systemMemoryInfo))
    mut heap systemAllocator = {systemMemoryInfo.TotalPhys/10*9}
    mut pool pool = {systemAllocator}
    mut stack stack = {systemAllocator}
    mut frame lastFrame={systemAllocator}
    mut frame currentFrame={systemAllocator}
    mut u64 start = 0
    mut u64 stop = 0
    mut u64 frequence = 0
    QueryPerformanceFrequency(ptr(frequence))
    
    const auto lexerContext = prepareLexer()
    
    QueryPerformanceCounter(ptr(start))
    const auto lalr = ">./frontend/main.tau<"
    const auto file = CreateFileA(lalr.ptr.toConstU8(), GENERIC_READ, FILE_SHARE_READ, nullptr, OPEN_EXISTING, FILE_ATTRIBUTE_READONLY|FILE_FLAG_SEQUENTIAL_SCAN, nullptr)
    const auto readBytes = GetFileSize(file, nullptr)
    mut mem buf = {readBytes}
    ReadFile(file, buf.data, readBytes, ptr(readBytes), nullptr)
    CloseHandle(file)
    QueryPerformanceCounter(ptr(stop))
    const auto io_usec = ((stop-start)*1000000)/frequence
    /*QueryPerformanceCounter(ptr(start))*/
    const auto p = 50000
    for j in [1:p] {
        const auto tokens = lexer(lexerContext, buf.data, buf.bytes, true, true)
    }
    /* mut vec<Node> nodePool = {}
    const ptr<Node> parseTree = parser(tokens, nodePool, buf.data, buf.bytes)*/
    QueryPerformanceCounter(ptr(stop))
    const auto total_usec = ((stop-start)*1000000)/frequence

    /* printTokenList(tokens) */
    /*parseTree.topDown(printNode, tokens, buf.data, buf.bytes)*/
    console().log(">read file <")
    console().log(io_usec.toString())
    console().log(">usec\n<")
    
    console().log(">total <")
    console().log(total_usec.toString())
    console().log(">usec\n<")

    const vec<strview> argv = {}
    const auto i = GetCommandLineA().split("> <", argv)
    /*console().log(argv.capacity.toString())
    console().log(">\x1b[38;2;0;200;0m<")*/
    for j in [1:i] {
        /*console().log(">Input <"+j+"> is: <"+argv[j]+">\n<")*/
        console().log(argv[j])
    }
/*    console().log(">\x1b[39m<")
    console().log(process().parameters.elements.toString())
    for p in process().parameters {
        console().log(p)
    }*/

    /*u64 frame = 0
    loop{
        frame = frame + 1
    }*/
}