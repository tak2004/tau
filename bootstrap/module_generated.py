# automatically generated by the FlatBuffers compiler, do not modify

# namespace: module

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ASTFileFormat(object):
    FlatBuffer = 0


class Version(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 8

    # Version
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Version
    def Major(self): return self._tab.Get(flatbuffers.number_types.Uint16Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # Version
    def Minor(self): return self._tab.Get(flatbuffers.number_types.Uint16Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(2))
    # Version
    def Build(self): return self._tab.Get(flatbuffers.number_types.Uint32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(4))

def CreateVersion(builder, major, minor, build):
    builder.Prep(4, 8)
    builder.PrependUint32(build)
    builder.PrependUint16(minor)
    builder.PrependUint16(major)
    return builder.Offset()


class Info(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Info()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Info
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Info
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            obj = Version()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Info
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def InfoStart(builder): builder.StartObject(2)
def InfoAddVersion(builder, version): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(version), 0)
def InfoAddName(builder, name): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def InfoEnd(builder): return builder.EndObject()


class ASTEntry(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ASTEntry()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsASTEntry(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ASTEntry
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ASTEntry
    def Format(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # ASTEntry
    def Bytes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # ASTEntry
    def Path(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def ASTEntryStart(builder): builder.StartObject(3)
def ASTEntryAddFormat(builder, format): builder.PrependInt8Slot(0, format, 0)
def ASTEntryAddBytes(builder, bytes): builder.PrependUint64Slot(1, bytes, 0)
def ASTEntryAddPath(builder, path): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(path), 0)
def ASTEntryEnd(builder): return builder.EndObject()


class Module(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Module()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsModule(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Module
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Module
    def Info(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = Info()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Module
    def Asts(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = ASTEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Module
    def AstsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Module
    def AstsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def ModuleStart(builder): builder.StartObject(2)
def ModuleAddInfo(builder, info): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(info), 0)
def ModuleAddAsts(builder, asts): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(asts), 0)
def ModuleStartAstsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ModuleEnd(builder): return builder.EndObject()


